[tox]
envlist = py2,py3,qa

[testenv]
commands =
    threaded-urllib3: - pip uninstall -y pycurl
    threaded-pycurl: - pip uninstall -y urllib3

    python setup.py check -s
    coverage: coverage run --source grab \
    ./runtest.py --test-all \
        --backend-mongo --backend-mysql --backend-redis --backend-postgres \
    mp: --mp-mode \
    threaded-pycurl: --spider-transport=threaded --grab-transport=pycurl \
    threaded-urllib3: --spider-transport=threaded --grab-transport=urllib3 \
    {posargs}
deps = 
    -rrequirements_dev.txt
    -rrequirements_dev_backend.txt

[testenv:py-sigint]
commands =
    ./runtest.py -t test.spider_sigint
    ./runtest.py -t test.grab_sigint

[testenv:py27-nobackend]
commands =
    ./runtest.py --test-all
deps =
    -rrequirements_dev.txt

[testenv:py-appveyor]
# sitepackages needs to get access to globally installed pycurl
# Curl is installed globally because old versionf of pycurl
# is not packaged as wheels, only exe or msi.
sitepackages = True
passenv = DISTUTILS_USE_SDK MSSdk INCLUDE LIB WINDIR
commands =
    {envpython} runtest.py --test-all \
    --backend-mongo --backend-mysql --backend-redis --backend-postgres
    {envpython} runtest.py --test-all \
    --backend-mongo --backend-mysql --backend-redis --backend-postgres \
    --spider-transport=threaded --grab-transport=pycurl
#    {envpython} runtest.py --test-all \
#    --backend-mongo --backend-mysql --backend-redis --backend-postgres \
#    --spider-transport=threaded --grab-transport=urllib3

deps =
    wheels/{env:LXML_BINARY:NA}
    wheels/{env:MYSQLCLIENT_BINARY:NA}
    pyquery
    -rrequirements_dev.txt
    -rrequirements_dev_backend.txt

[testenv:pylint-all]
commands = pylint setup.py test grab --enable=all --disable=missing-docstring,locally-disabled,locally-enabled,suppressed-message
deps =
    -rrequirements_dev.txt
    -rrequirements_dev_backend.txt

[testenv:pylint-debug]
commands = pylint {posargs}
deps =
    -rrequirements_dev.txt
    -rrequirements_dev_backend.txt

[testenv:qa]
commands =
    python setup.py check -s
    pylint setup.py test grab
    flake8 setup.py test grab 
deps =
    -rrequirements_dev.txt
    -rrequirements_dev_backend.txt

[testenv:doc]
whitelist_externals=make
basepython=python3
skip_install = True
changedir = docs/en
commands = make html
deps = -rrequirements_readthedocs.txt

[testenv:doc-ru]
whitelist_externals=make
basepython=python3
skip_install = True
changedir = docs/ru
commands = make html
deps = -rrequirements_readthedocs.txt
